<div class="container-fluid">

    <!-- Page Heading -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
        <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
            <i class="fas fa-download fa-sm text-white-50"></i> Generate Report
        </a>
    </div>



    <div class="row">

        <!-- Area Chart -->
        <div class="col-xl-8 col-lg-7">
            <h2>Analytics</h2>
            <div class="card shadow mb-4">

                <div style="width:100%; max-width:800px; margin-bottom:30px;">
                    <canvas id="realtimeCountryChart"></canvas>
                </div>

            </div>
            <div class="card shadow mb-4">

                <div style="width:100%; max-width:600px; margin-bottom:30px;">
                    <canvas id="deviceChart"></canvas>
                </div>
            </div>
            <div class="card shadow mb-4">

                <div style="width:100%; max-width:800px; margin-bottom:30px;">
                    <canvas id="historicalChart"></canvas>
                </div>
            </div>


        </div>


    </div>


</div>
@section Scripts {
    <script src="~/manage/js/demo/chart-area-demo.js"></script>
    <script src="~/manage/js/demo/chart-pie-demo.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        window.onload = function () {
            let realtimeCountryChart, deviceChart, historicalChart;

            async function loadAnalytics() {
                try {
                    const res = await fetch('/Analytics/AnalyticsData');
                    const data = await res.json();

                    // --------- Realtime Country Chart ---------
                    const countryMap = {};
                    if (data.realtime && data.realtime.length > 0) {
                        data.realtime.forEach(r => {
                            const country = r.country;
                            const value = parseInt(r.activeUsers);
                            if (countryMap[country]) {
                                countryMap[country] += value;
                            } else {
                                countryMap[country] = value;
                            }
                        });
                    }

                    const countries = Object.keys(countryMap).length > 0 ? Object.keys(countryMap) : ['No Data'];
                    const activeUsers = Object.keys(countryMap).length > 0 ? Object.values(countryMap) : [0];

                    if (!realtimeCountryChart) {
                        const ctx1 = document.getElementById('realtimeCountryChart').getContext('2d');
                        realtimeCountryChart = new Chart(ctx1, {
                            type: 'bar',
                            data: {
                                labels: countries,
                                datasets: [{
                                    label: 'Active Users',
                                    data: activeUsers,
                                    backgroundColor: 'rgba(54, 162, 235, 0.6)'
                                }]
                            },
                            options: { responsive: true, maintainAspectRatio: false }
                        });
                    } else {
                        realtimeCountryChart.data.labels = countries;
                        realtimeCountryChart.data.datasets[0].data = activeUsers;
                        realtimeCountryChart.update();
                    }

                    // --------- Device Category Chart ---------
                    const deviceMap = {};
                    if (data.realtime && data.realtime.length > 0) {
                        data.realtime.forEach(r => {
                            const device = r.device;
                            const value = parseInt(r.activeUsers);
                            if (deviceMap[device]) {
                                deviceMap[device] += value;
                            } else {
                                deviceMap[device] = value;
                            }
                        });
                    }

                    const devices = Object.keys(deviceMap).length > 0 ? Object.keys(deviceMap) : ['No Data'];
                    const deviceCounts = Object.keys(deviceMap).length > 0 ? Object.values(deviceMap) : [0];

                    if (!deviceChart) {
                        const ctx2 = document.getElementById('deviceChart').getContext('2d');
                        deviceChart = new Chart(ctx2, {
                            type: 'doughnut',
                            data: {
                                labels: devices,
                                datasets: [{
                                    label: 'Devices',
                                    data: deviceCounts,
                                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                                }]
                            },
                            options: { responsive: true, maintainAspectRatio: false }
                        });
                    } else {
                        deviceChart.data.labels = devices;
                        deviceChart.data.datasets[0].data = deviceCounts;
                        deviceChart.update();
                    }

                    // --------- Historical Users Chart ---------
                    const historicalLabels = ['Last 1 Day', 'Last 7 Days', 'Last 30 Days'];
                    const historicalData = [
                        parseInt(data.day1Users || 0),
                        parseInt(data.last7DaysUsers || 0),
                        parseInt(data.last30DaysUsers || 0)
                    ];

                    if (!historicalChart) {
                        const ctx3 = document.getElementById('historicalChart').getContext('2d');
                        historicalChart = new Chart(ctx3, {
                            type: 'line',
                            data: {
                                labels: historicalLabels,
                                datasets: [{
                                    label: 'Users',
                                    data: historicalData,
                                    fill: true,
                                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    tension: 0.3
                                }]
                            },
                            options: { responsive: true, maintainAspectRatio: false }
                        });
                    } else {
                        historicalChart.data.datasets[0].data = historicalData;
                        historicalChart.update();
                    }

                } catch (err) {
                    console.error('Error loading analytics:', err);
                }
            }

            loadAnalytics();
            setInterval(loadAnalytics, 5000);
        };
    </script>

}
